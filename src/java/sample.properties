#
# Common configuration items that need to be set for both a processor config and reader config
#
#
# whether or not to start processor
ice.processor=true

# whether or not to start reader/UI
ice.reader=false

# s3 bucket name where Ice can store output files. Ice must have read and write access to billing s3 bucket.
ice.work_s3bucketname=work_s3bucketname
# location for the output files bucket.  It should be specified for buckets using v4 validation
ice.work_s3bucketregion=eu-west-1
# prefix of Ice output files
ice.work_s3bucketprefix=ice/


#
#
# Reader configuration items
#
#

# enable hourly data - defaults to true if not set
# if false, aggregation options are only daily, weekly, monthly.
# allows reader to run with much less memory
ice.hourlyData=true

# enable tag coverage metrics: none, basic, withUserTags - uses more memory
# must have at least the coverage specified generated by the processor
ice.tagCoverage=none

# the highstock url; host it somewhere else and change this if you need HTTPS
ice.highstockUrl=http://code.highcharts.com/stock/highstock.js

# you company name. it will be used by UI
ice.companyName=Your Company Name

# local directory for Ice reader. the directory must exist.
ice.reader.localDir=/mnt/ice_reader

# monthly data cache size for Ice reader.
ice.monthlycachesize=12

# a short alert or notice to place in the header of the dashboard pages
ice.notice=

#
#
# Processor configuration items
#
#

# if running in AWS, whether or not to only run a single processor pass
# will stop instance when done processing
ice.processOnce=false

# start date YYYY-MM format from when you want to start processing the billing files
ice.startMonth=2017-06

# local directory for Ice processor. the directory must exist.
ice.processor.localDir=/mnt/ice_processor

# whether or not to start reservation capacity poller
ice.reservationCapacityPoller=false

# whether to break out family reservation usage as separate operation type
ice.breakoutFamilyReservationUsage=false

# whether or not to create data files that can be imported into services such as ElasticSearch
# choices are:
#   no - do not write JSON files
#   ndjson - generate newline delimited JSON records - one record per line
#   bulk - generate JSON lines file with one ElasticSearch index instruction for each record to be used for bulk import
ice.writeJsonFiles=no

# enable tag coverage metrics: none, basic, withUserTags - uses more memory
ice.tagCoverage=none

# default reservation period, possible values are oneyear, threeyear
ice.reservationPeriod=oneyear
# default reservation utilization, possible values are HEAVY and PARTIAL.
ice.reservationUtilization=PARTIAL

# modify the following 5 properties according to your billing files configuration.
# if you have multiple payer accounts, you will need to specify multiple values for each property.
# if you need both detailed billing and cost and usage reports supported you will also need multiple values for each property.
# s3 bucket name where the billing files are. multiple bucket names are delimited by ",". Ice must have read access to billing s3 bucket.
ice.billing_s3bucketname=billing_s3bucketname1,billing_s3bucketname2
# location for the billing bucket.  It should be specified for buckets using v4 validation
ice.billing_s3bucketregion=eu-west-1,eu-central-1
# prefix of the billing files. multiple prefixes are delimited by ","
ice.billing_s3bucketprefix=,
# specify your payer account id here. Multiple account ids are delimited by ",".
ice.billing_payerAccountId=123456789012,234567890123
# specify the assumed role name here if you use IAM role access to read from billing s3 bucket. multiple role names are delimited by ",". "ice.billing_accessRoleName=,ice" means assumed role access is only used for the second bucket.
#ice.billing_accessRoleName=,ice
# specify external id here if it is used. multiple external ids are delimited by ",". if you don't use external id, you can leave this property unset.
#ice.billing_accessExternalId=

#
# Kubernetes reports enable breakout of costs by tag.
#
# Report config usage is the same as for billing reports above except in this case accountId is optional if cross-account access is not used
ice.kubernetes_s3bucketname=kubernetes_s3bucketname1,kubernetes_s3bucketname2
ice.kubernetes_s3bucketregion=eu-west-1,eu-central-1
ice.kubernetes_s3bucketprefix=,
#ice.kubernetes_accountId=,123456789012
#ice.kubernetes_accessRoleName=,ice
#ice.kubernetes_accessExternalId=

# use blended rates and cost if set to true, otherwise use unblended
ice.use_blended=

# cost and usage report switchover date in YYYY-MM format. The month in which you switch from using detailed billing reports to cost and usage reports.
# cannot be earlier than 2017-07 due to field requirements that aren't met in earlier reports.
# RDS instance reservation IDs aren't correct in the reports until 2017-10.
ice.costAndUsageStartDate=2017-10

# Enterprise Discount Program
# On Jan. 1, 2019 AWS starting exposing Net Unblended Rate and Cost for some customers in their Cost and Usage Reports.
# The following flag controls when to switch to using NetUnblended values for rate and cost calculations.
# Setting this value will override the "use_blended" flag above
ice.costAndUsageNetUnblendedStartDate=2019-01

# If NetUnblended is being used, amortization of Upfront RI payments must also include the full EDP discount. Because ICE doesn't use the subscription fee lineitem
# to compute the upfront payments, we must specify discount rate that must be applied to the list price.
# If using CURs starting in 2019-01, the RI amortization and recurring fees are pulled from the DiscountedUsage line items.
# Prior to that, the costs are computed based on the price list data and the edpDiscounts values defined here.
# discount is specified by a comma separated set of start dates at percentage of the form yyyy_mm:%,yyyy_mm:%
ice.edpDiscounts=2019-01:5

# cost and usage processor number of worker threads (default is 5)
# ice.numthreads=


# specify your custom tags here. Multiple tags are delimited by ",". If specified, BasicResourceService will be used to generate resource groups for you.
# PLEASE MAKE SURE you have a limited number (e.g. < 100) of unique value combinations from your custom tags, otherwise Ice performance will be greatly affected.
# This list should NOT include aliases that will be consolidated by the tagKey list below.
#ice.customTags=tag1,tag2

# in addition to customTags, the additional tags to include for code coverage dashboard
#ice.additionalTags=tag3

#
# The following settings are specified in the in the billing data folder as ice_config.json or ice_config.yaml
#    - Tag name consolidation/aliasing
#    - Tag value consolidation/aliasing
#    - Kubernetes configuration
# See ice_config.sample for an example
#

#
# Account settings are pulled from the AWS Organizations Service, but can be overridden here for backward compatibility.
#
# change the follow account settings - these are automatically pulled from the organizations API
#   an ICE-specific name can be applied by setting the tag "IceName"
#ice.account.account1=123456789011
#ice.account.account2=123456789012
#ice.account.account3=123456789013

# set reservation owner accounts and the products for which they have reservations
#   These can be pulled from the account tag "IceRiProducts". Product names are separated by '+' for tag values (e.g. "ec2+rds")
# possible values are ec2, rds, and redshift
#ice.owneraccount.account1=ec2,redshift,rds

# if reservation capacity poller needs to use IAM role to access ec2 API, set the assumed role here for each reservation owner account
# These values can be pulled from the account tag "IceRole"
#ice.owneraccount.account1.role=ice
#ice.owneraccount.account2.role=ice
#ice.owneraccount.account5.role=ice

# if reservation capacity poller needs to use IAM role to access ec2 API and external id is used, set the external id here for each reservation owner account. otherwise you can leave it unset.
# These values can be pulled from the account tag "IceExternalId"
#ice.owneraccount.account1.externalId=
#ice.owneraccount.account2.externalId=
#ice.owneraccount.account5.externalId=


