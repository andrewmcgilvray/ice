#
# Example YAML config file for account, tag, kubernetes, and postprocrules settings
#
accounts:
  - name: account1
    id: 123456789011
    # riProducts values are: ec2, rds, redshift, es, ec
    riProducts: [ec2, rds]
    role: ice
    externalId:
    # Default tags to apply to resources used by the account if not already set
    tags:
        TagKey: DefaultTagValue

#
# tag key/value consolidation
# case differences are merged automatically, so no need to include aliases that differ only by case.
#
tags:
  - name: Environment
    aliases: [env]
    values:
      Prod: [production, prd]

#
#
# Kubernetes - list of reports
#
# enable break out of compute costs by tag.
#
kubernetes:
  - bucket: k8s-report-bucket
    region: us-east-1
    prefix: hourly/kubernetes
    accountId: 123456789012
    accessRole: ice
    #externalId: 
    
	# Kubernetes reports contain line items identified first by cluster name.
	# Cost entries in the billing data can be associated to a cluster by applying a
	# set of rules to the tag values on the billing entry in order to generate a cluster name.
	# A set of rules is combined into a formula. Each rule is separated by '+'
	# A rule can be one of:
	#   literal string enclosed by double quotes
	#   tagname with zero or more function calls. e.g. TagName.func().func()...
	#       functions can be one of toLower(), toUpper(), regex()
    clusterNameFormulae: [ 'Cluster.toLower()', 'Cluster.regex("k8s-(.*)")' ]
    
    # user tag and value assigned to indicate cluster compute instance
    computeTag: Role
    computeValue: compute
    
    # user tag to assign namespace name
    namespaceTag: K8sNamespace
    
    namespaceMappings:
      - tag: Environment
        value: Prod
        patterns: [ ".*prod.*", ".*production.*", ".*prd.*" ]
        
    # assign the following kubernetes labels to the matching user tags
    tags: [ userTag1, userTag2 ]

#
#
# PostProcessor rules
#
# Allows generation of arbitrary cost and usage data from the existing cost and usage data
# This is useful to compute out-of-cycle-billing data based on usage for privately negotiated
# pricing not reflected in the cost and usage reports.
#
postprocrules:
  - name: OCBProduct
    start: <start-month> # e.g. 2018-10
    end: <end-month> # e.g. 2019-10
    operands:
      #
      # Operands require a type of "cost" or "usage" to specify which data collection to use
      # The remaining optional values are as follows:
      #   accounts: [list-of-account-ids]
      #   regions: [list-of-regions]
      #   zones: [list-of-zones]
      #   product: <product service code>
      #   operation: <regex>  regex with 1 capture group, e.g. (..)-Operation[12].*
      #   usageType: <regex>  regex with 1 capture group, e.g. (..)-UsageType[12].*
      #
      # There must be one "in" and one "out" operand. The in operand drives what data is
      # captured to apply the calculations. Other operands can be provided that have
      # whatever names you chose. The "in" and other operands can be referenced in the
      # "out" expression by enclosing the operand name in "${}".
      # The reserved name "group" is assigned the value of the capture group for the
      # "in" operation and usageType regex expressions. It can be used in the "out"
      # operand as well as other optional operands.
      # Values not specified for additional operands and copied from the "in" parameter.
      #
      out: # required output operand
        product: <Product Service Code>
        usageType: ${group}-Requests
      in:
        type: usage
        product: <Product Service Code>
        usageType: (..)-Requests-[12].*
      data:
        type: usage
        usageType: ${group}-DataTransfer-Out-Bytes
    #
    # cost is the computation that gets evaluated to produce a value saved using the out operand specification.
    #
    cost: <expression>  # e.g. '(${in} - (${data} * 1024 / 5)) * 0.01 / 1000'
    #
    # usage is the computation that gets evaluated to product a value saved using the out operand specification.
    #
    usage: <expression> # e.g. '${in} - (${data} * 1024 / 5)'
